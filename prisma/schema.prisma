generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// TODO: Make sure the ID is consistent throughout the different types of user models
model User {
    id        String   @id @default(uuid())
    email     String   @unique
    name      String
    // there is no need to store the password in the database, we will use clerk to handle authentication
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // The id below is used to reference the user with our clerk authentication=
    clerkId   String   @unique

    // Specific user roles
    student  Student?
    lecturer Lecturer?
}

model Lecturer {
    id          String       @id @default(uuid())
    userId      String       @unique
    user        User         @relation(fields: [userId], references: [id])
    staffNumber String       @unique
    nominations Nomination[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    supervisor  Supervisor? // an admin will assign a student to a supervisor which is a lecturer
    examiner    Examiner? // a lecturer can be an examiner, when a nomination is accepted
}

// Student-specific data
model Student {
    id           String       @id @default(uuid())
    userId       String       @unique
    user         User         @relation(fields: [userId], references: [id])
    matricNumber String       @unique
    submissions  Submission[]
    supervisor   Supervisor?  @relation(fields: [supervisorId], references: [id])
    project      Project?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    Viva         Viva?
    supervisorId String?
}

// Supervisor-specific data
model Supervisor {
    id         String    @id @default(uuid())
    lecturerId String    @unique
    lecturer   Lecturer  @relation(fields: [lecturerId], references: [id])
    students   Student[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

// Examiner-specific data
model Examiner {
    id         String   @id @default(uuid())
    lecturerId String   @unique
    lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
    vivas      Viva[]   @relation("vivasParticipated")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Submission {
    id        String   @id @default(uuid())
    title     String // Title of the submission
    content   String // URL to the submission
    feedback  String? // Feedback from the supervisor 
    studentId String
    student   Student  @relation(fields: [studentId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Viva {
    id          String       @id @default(uuid())
    topic       String
    studentId   String       @unique
    student     Student      @relation(fields: [studentId], references: [id])
    vivaDate    DateTime? // Date of the viva, it is scheduled when the nomination is accepted
    evaluation  String? // Evaluation of the viva, given by the examiners
    passed      Boolean? // Whether the student passed the viva or not
    examiners   Examiner[]   @relation("vivasParticipated")
    nominations Nomination[] @relation("nominations")
    project     Project?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Project {
    id          String   @id @default(uuid())
    title       String
    studentId   String   @unique
    subjectArea String
    projectType String
    student     Student  @relation(fields: [studentId], references: [id])
    vivaId      String   @unique
    viva        Viva     @relation(fields: [vivaId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Nomination {
    id         String   @id @default(uuid())
    details    String
    lecturerId String
    accepted   Boolean  @default(false)
    rejected   Boolean  @default(false)
    lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
    vivas      Viva[]   @relation("nominations")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())
}
